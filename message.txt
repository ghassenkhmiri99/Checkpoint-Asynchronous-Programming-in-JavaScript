//---------------------------Task 1--------------------------------//

async function iterateWithAsyncAwait(values) {
    for (const value of values) {
        console.log(value);
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
}
//---------------------------Task 1--------------------------------//
//---------------------------Task 2--------------------------------//
async function fetchData() {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve("Fetched data from API");
        }, 2000);
    });
}


async function awaitCall() {
    const data = await fetchData();
    console.log(data);
}
//---------------------------Task 2--------------------------------//
//---------------------------Task 3--------------------------------//

async function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const success = Math.random() > 0.5;
            if (success) {
                resolve("Fetched data from API");
            } else {
                reject("Failed to fetch data from API");
            }
        }, 2000);
    });
}

async function awaitCall() {
    try {
        const data = await fetchData();
        console.log(data);
    } catch (error) {
        console.log("An error occurred:", error);
    }
}
//---------------------------Task 3--------------------------------//
//---------------------------Task 4--------------------------------//
async function chainedAsyncFunctions() {
    for (let i = 0; i < 3; i++) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        console.log(`Function ${i + 1} called`);
    }
}
//---------------------------Task 4--------------------------------//
//---------------------------Task 5--------------------------------//
async function concurrentRequests() {
    const promise1 = fetchData();
    const promise2 = fetchData();
    try {
        const [result1, result2] = await Promise.all([promise1, promise2]);
        console.log("Results:", result1, result2);
    } catch (error) {
        console.log("An error occurred during concurrent requests:", error);
    }
}
//---------------------------Task 5--------------------------------//
//---------------------------Task 6--------------------------------//
async function parallelCalls(urls) {
    const fetchPromises = urls.map(url => fetchDataFromUrl(url));
    try {
        const results = await Promise.all(fetchPromises);
        console.log("Responses:", results);
    } catch (error) {
        console.log("An error occurred during parallel calls:", error);
    }
}

async function fetchDataFromUrl(url) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const success = Math.random() > 0.5;
            if (success) {
                resolve(`Data from ${url}`);
            } else {
                reject(`Failed to fetch data from ${url}`);
            }
        }, 2000);
    });
}
//---------------------------Task 6--------------------------------//

iterateWithAsyncAwait([1, 2, 3, 4, 5]);
awaitCall();
chainedAsyncFunctions();
concurrentRequests();
parallelCalls(['url1', 'url2', 'url3']);